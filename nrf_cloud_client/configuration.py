# coding: utf-8

"""
    nRF Cloud REST API

    # Overview   The [nRF Cloud REST API](https://docs.nordicsemi.com/bundle/nrf-cloud/page/APIs/REST/RESTOverview.html)   allows you to programmatically interact with, and retrieve historical information generated by, any device that you have   connected to <a href='https://nrfcloud.com'>nRFCloud.com</a>. This includes both IP-based devices–that is, devices that have an IP address and can talk directly to our   IoT platform–and Bluetooth Low Energy (BLE) devices, which require the use of an IP-based device (a gateway).  The REST API documentation is a supplement to the <a href='https://docs.nordicsemi.com/bundle/nrf-cloud/page/index.html'>main nRF Cloud documentation</a>.  [DevZone](https://devzone.nordicsemi.com) is Nordic Semiconductor's official tech support site and community. Get help from a dedicated tech support team and more than 25,000 other community members.  If you are encountering unexpected behavior or errors, check the current [status](https://status.nrfcloud.com) of nRF Cloud.  # Error Codes Some of the endpoints return specific error codes (called 'nRF Codes'), which can be found in this table.   <table>       <thead>       <tr>           <th style='width:10%'>nRF&nbsp;Code</th>           <th style='width:20%'>Error</th>           <th style='width:35%'>Reason</th>           <th style='width:35%'>Solution</th>       </tr>       </thead>       <tbody>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40000'>40000</div>           </td>           <td valign='top'>Bad request error.</td>           <td valign='top'>This error could mean many things. Most of the time it means something is not as expected               on the cloud like a file was missing or an internal service failed.           </td>           <td valign='top'>Alert Nordic support by filing a ticket on <a href='https://devzone.nordicsemi.com/'                                                                           target='_blank'>DevZone</a>.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40001'>40001</div>           </td>           <td valign='top'>Device does not have a valid device certificate for associating (adding) it to your               account.           </td>           <td valign='top'>Your nRF9160 DK device or Thingy:91 device does not have a 'just-in-time provisioning' (JITP) certificate, or               the certificate has been corrupted.           </td>           <td valign='top'>Refer to the <a                   href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/nrf9160_gs.html'>               nRF9160 DK Getting Started Guide</a> or <a                   href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/thingy91_gsg.html'>               Thingy:91 Getting Started Guide</a> for information on upgrading your device certificate.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40002'>40002</div>           </td>           <td valign='top'>Device cannot be dissociated (removed from your account).</td>           <td valign='top'>The nRF9160 DK or Thingy:91 you are trying to dissociate was added to your account using the legacy               pairing mechanism (button and switch pattern) instead of the <code>AssociateDevice</code> <a                       href='#operation/AssociateDevice'>endpoint</a>.           </td>           <td valign='top'>Delete the device from your account using either the <code>Configure</code> &gt; <code>Delete               Device</code> menu item on nrfcloud.com or the <code>DeleteDevice</code> <a                   href='#operation/DeleteDevice'>endpoint</a>. If you want to re-add this device to your account you               will first have to flash a new device certificate and upgrade the firmware. Refer to the <a                   href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/nrf9160_gs.html'>               nRF9160 DK Getting Started Guide</a> or <a                   href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/thingy91_gsg.html'>               Thingy:91 Getting Started Guide</a> for information on how to do this.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40005'>40005</div>           </td>           <td valign='top'>Usage limit exceeded.</td>           <td valign='top'>The API request exceeds one of the monthly usage limits defined on the               <a href='https://nrfcloud.com/#/pricing'>Pricing page</a> for users on the free Developer plan.           </td>           <td valign='top'>Wait until the beginning of the next month to continue your usage on the Developer               plan, or upgrade to the Pro or Enterprise plan.               See <a href='https://docs.nordicsemi.com/bundle/nrf-cloud/page/AccountAndTeamManagement/Plans/PlanOverview.html'>               nRF Cloud plans</a> to learn about the available plans, how to view your plan details and usage,               and how to upgrade your plan.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40100'>40100</div>           </td>           <td valign='top'>Access denied error.</td>           <td valign='top'>The user making the request does not have access to the requested resource (device, SIM,               invitation, etc.).           </td>           <td valign='top'>Confirm your authorization is correct. Refer to the endpoint's documentation to               determine if your request requires a Simple Token (API Key) or a JSON Web Token (JWT).               Some endpoints accept either.</td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40101'>40101</div>           </td>           <td valign='top'>Device is already associated with another account.</td>           <td valign='top'>Another user has already added this device to their account.</td>           <td valign='top'>If you know the other account owner you can request that they dissociate the device so that               you can add it to your account. Otherwise, this operation is not allowed.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40102'>40102</div>           </td>           <td valign='top'>The ownership code is invalid for this device.</td>           <td valign='top'>You entered the wrong ownership code (PIN or HWID) that is printed on the Nordic               Semiconductor product label, or which you submitted when creating a new device certificate.           </td>           <td valign='top'>Verify the PIN or HWID and enter it correctly.</td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40103'>40103</div>           </td>           <td valign='top'>This device is not associated with your account.</td>           <td valign='top'>The device you want to dissociate (remove from your account) is not found in your               account.           </td>           <td valign='top'>None. You are not allowed to do this.</td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40410'>40410</div>           </td>           <td valign='top'>Entity not found.           </td>           <td valign='top'>This error can be thrown for a variety of reasons, indicating that the entity could not be found by its ID. The entity could be a device, a certificate, or an API key, for example.           </td>           <td valign='top'>Refer to the associated message for details. For devices, confirm the device id you entered matches your existing device ID and that the device has not been deleted.               You can confirm using the <a href=\"/v1#operation/ListDevices\">ListDevices endpoint</a>.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40411'>40411</div>           </td>           <td valign='top'>A Nordic Semiconductor product with this device id and ownership code could not be found.           </td>           <td valign='top'>The device id you entered matches the format for a Nordic Semiconductor product, but the               device id and/or ownership code cannot be found in our system.           </td>           <td valign='top'>Compare the values you entered with what is printed on your product's label (for devices               with <code>IMEI</code> printed on the label, the device id will be <code>nrf-[IMEI]</code>, e.g., <code>nrf-123456789012345</code>).               If you submitted the correct values, please contact Nordic Semiconductor Tech Support for further               assistance.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40412'>40412</div>           </td>           <td valign='top'>No device found for this id. The device has not yet been provisioned.</td>           <td valign='top'>The device cannot be found in the nRF Cloud IoT device registry. The most likely reason               is that the device has not established an initial communication with the nRF Cloud MQTT broker, which               creates a new entry in the registry. Possible causes:<br><br>               <ol>                   <li>You entered the device id and/or ownership code (PIN or HWID) incorrectly.</li>                   <li>The device has not yet achieved an LTE connection, so it cannot contact nRF Cloud.</li>                   <li>The device has not completed the initial MQTT handshaking with nRF Cloud. Some hardware devices                       may indicate this completion using LED patterns.</li>                   <li>Corrupt modem firmware.</li>                   <li>Corrupt, wrongly flashed, or illegitimate device certificates.</li>                   <li>Poor LTE connection.</li>               </ol>           </td>           <td valign='top'>Solutions that match the possible reasons are listed here. For Nordic Semiconductor products,               refer to the <a href='https://docs.nordicsemi.com/bundle/ncs-latest/page/nrf/gsg_guides.html'>               Getting Started Guide</a> for your device.<br><br>               <ol>                   <li>Verify the values and try again. For Nordic Semiconductor products, please see the solution for                       nRF Code 40411, above.</li>                   <li>Ensure that the device's SIM card or eSIM is activated and functioning. If using an iBasis                       SIM card that is packaged with a Nordic Semiconductor product such as a Development                       Kit, activate the card on nrfcloud.com and then (re-)boot the device to connect.</li>                   <li>Check the LED status indicators to ensure the device indicates it has connected.</li>                   <li>(Re-)flash the latest modem firmware.</li>                   <li>Flash new device certificates obtained from the <code>CreateDeviceCertificate</code> <a                           href='#operation/CreateDeviceCertificate'> endpoint</a>.</li>                   <li>Move to a location with a better LTE connection.</li>               </ol>           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40413'>40413</div>           </td>           <td valign='top'>No device found for this id.</td>           <td valign='top'>You are trying to dissociate a device that is not found in your account (wrong device id),               or you are submitting the device's friendly name, not the id.           </td>           <td valign='top'>Verify you are passing the correct device id (not the friendly name you may have given               it).           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40414'>40414</div>           </td>           <td valign='top'>No device found for this id.</td>           <td valign='top'>You are trying to delete a device that was not found in your account or in the IoT registry               (i.e., provisioned, but not yet added to your account).           </td>           <td valign='top'><em>This may not be an error</em>, because the device may already be deleted. Verify you entered               the correct device id and ownership code (PIN or HWID on the label). For Nordic Semiconductor products,               see the solution for nRF Code 40411, above.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40420'>40420</div>           </td>           <td valign='top'>Resource not found.           </td>           <td valign='top'>This error can be thrown for a variety of reasons, indicating that a resource could not be found by its ID. The resource could be a device, a certificate, or an API key, for example.           </td>           <td valign='top'>Refer to the associated message for details. For devices, confirm the device id you entered matches your existing device ID and that the device has not been deleted.               You can confirm using the <a href=\"/v1#operation/ListDevices\">ListDevices endpoint</a>.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/40499'>40499</div>           </td>           <td valign='top'>Not found, but no error.</td>           <td valign='top'>The requested item(s) do not exist, but there is no error.               For some requests, if the list to be returned is empty, this code and an explanatory message is               returned instead of an empty list.           </td>           <td valign='top'>No action is necessary.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/41600'>41600</div>           </td>           <td valign='top'>Range not satisfiable.</td>           <td valign='top'>You are calling an endpoint that uses the Range header and the byte range does not exist in               the target file or the range header itself is malformed.           </td>           <td valign='top'>Check the expected file size for the target file and ensure the range requested exists.               Refer to the <a href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range' target='_blank'>range                   header docs</a> for more information.           </td>       </tr>       <tr>           <td valign='top'>               <div data-section-id='section/Error-Codes/42200'>42200</div>           </td>           <td valign='top'>Validation failed.</td>           <td valign='top'>You are calling an endpoint with invalid request data.</td>           <td valign='top'>Check the expected request format and try again.</td>       </tr>       </tbody>   </table> 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import copy
import http.client as httplib
import logging
from logging import FileHandler
import multiprocessing
import sys
from typing import Any, ClassVar, Dict, List, Literal, Optional, TypedDict, Union
from typing_extensions import NotRequired, Self

import urllib3


JSON_SCHEMA_VALIDATION_KEYWORDS = {
    'multipleOf', 'maximum', 'exclusiveMaximum',
    'minimum', 'exclusiveMinimum', 'maxLength',
    'minLength', 'pattern', 'maxItems', 'minItems'
}

ServerVariablesT = Dict[str, str]

GenericAuthSetting = TypedDict(
    "GenericAuthSetting",
    {
        "type": str,
        "in": str,
        "key": str,
        "value": str,
    },
)


OAuth2AuthSetting = TypedDict(
    "OAuth2AuthSetting",
    {
        "type": Literal["oauth2"],
        "in": Literal["header"],
        "key": Literal["Authorization"],
        "value": str,
    },
)


APIKeyAuthSetting = TypedDict(
    "APIKeyAuthSetting",
    {
        "type": Literal["api_key"],
        "in": str,
        "key": str,
        "value": Optional[str],
    },
)


BasicAuthSetting = TypedDict(
    "BasicAuthSetting",
    {
        "type": Literal["basic"],
        "in": Literal["header"],
        "key": Literal["Authorization"],
        "value": Optional[str],
    },
)


BearerFormatAuthSetting = TypedDict(
    "BearerFormatAuthSetting",
    {
        "type": Literal["bearer"],
        "in": Literal["header"],
        "format": Literal["JWT"],
        "key": Literal["Authorization"],
        "value": str,
    },
)


BearerAuthSetting = TypedDict(
    "BearerAuthSetting",
    {
        "type": Literal["bearer"],
        "in": Literal["header"],
        "key": Literal["Authorization"],
        "value": str,
    },
)


HTTPSignatureAuthSetting = TypedDict(
    "HTTPSignatureAuthSetting",
    {
        "type": Literal["http-signature"],
        "in": Literal["header"],
        "key": Literal["Authorization"],
        "value": None,
    },
)


AuthSettings = TypedDict(
    "AuthSettings",
    {
        "Simple Token": BearerAuthSetting,
        "JSON Web Token": BearerAuthSetting,
        "Service Evaluation Token": BearerAuthSetting,
    },
    total=False,
)


class HostSettingVariable(TypedDict):
    description: str
    default_value: str
    enum_values: List[str]


class HostSetting(TypedDict):
    url: str
    description: str
    variables: NotRequired[Dict[str, HostSettingVariable]]


class Configuration:
    """This class contains various settings of the API client.

    :param host: Base url.
    :param ignore_operation_servers
      Boolean to ignore operation servers for the API client.
      Config will use `host` as the base url regardless of the operation servers.
    :param api_key: Dict to store API key(s).
      Each entry in the dict specifies an API key.
      The dict key is the name of the security scheme in the OAS specification.
      The dict value is the API key secret.
    :param api_key_prefix: Dict to store API prefix (e.g. Bearer).
      The dict key is the name of the security scheme in the OAS specification.
      The dict value is an API key prefix when generating the auth data.
    :param username: Username for HTTP basic authentication.
    :param password: Password for HTTP basic authentication.
    :param simple_token: Simple Access token.
    :param json_token: JSON Web token.
    :param evaluation_token: Service Evaluation token.
    :param server_index: Index to servers configuration.
    :param server_variables: Mapping with string values to replace variables in
      templated server configuration. The validation of enums is performed for
      variables with defined enum values before.
    :param server_operation_index: Mapping from operation ID to an index to server
      configuration.
    :param server_operation_variables: Mapping from operation ID to a mapping with
      string values to replace variables in templated server configuration.
      The validation of enums is performed for variables with defined enum
      values before.
    :param ssl_ca_cert: str - the path to a file of concatenated CA certificates
      in PEM format.
    :param retries: Number of retries for API requests.
    :param ca_cert_data: verify the peer using concatenated CA certificate data
      in PEM (str) or DER (bytes) format.

    :Example:
    """

    _default: ClassVar[Optional[Self]] = None

    def __init__(
        self,
        host: Optional[str]=None,
        api_key: Optional[Dict[str, str]]=None,
        api_key_prefix: Optional[Dict[str, str]]=None,
        username: Optional[str]=None,
        password: Optional[str]=None,
        simple_token: Optional[str]=None,
        json_token: Optional[str]=None,
        evaluation_token: Optional[str]=None,
        server_index: Optional[int]=None,
        server_variables: Optional[ServerVariablesT]=None,
        server_operation_index: Optional[Dict[int, int]]=None,
        server_operation_variables: Optional[Dict[int, ServerVariablesT]]=None,
        ignore_operation_servers: bool=False,
        ssl_ca_cert: Optional[str]=None,
        retries: Optional[int] = None,
        ca_cert_data: Optional[Union[str, bytes]] = None,
        *,
        debug: Optional[bool] = None,
    ) -> None:
        """Constructor
        """
        self._base_path = "https://api.nrfcloud.com/v1" if host is None else host
        """Default Base url
        """
        self.server_index = 0 if server_index is None and host is None else server_index
        self.server_operation_index = server_operation_index or {}
        """Default server index
        """
        self.server_variables = server_variables or {}
        self.server_operation_variables = server_operation_variables or {}
        """Default server variables
        """
        self.ignore_operation_servers = ignore_operation_servers
        """Ignore operation servers
        """
        self.temp_folder_path = None
        """Temp file folder for downloading files
        """
        # Authentication Settings
        self.api_key = {}
        if api_key:
            self.api_key = api_key
        """dict to store API key(s)
        """
        self.api_key_prefix = {}
        if api_key_prefix:
            self.api_key_prefix = api_key_prefix
        """dict to store API prefix (e.g. Bearer)
        """
        self.refresh_api_key_hook = None
        """function hook to refresh API key if expired
        """
        self.username = username
        """Username for HTTP basic authentication
        """
        self.password = password
        """Password for HTTP basic authentication
        """
        self.simple_token = simple_token
        """Access token
        """
        self.json_token = json_token
        """JSON Web token
        """
        self.evaluation_token = evaluation_token
        """Service Evaluation token
        """
        self.logger = {}
        """Logging Settings
        """
        self.logger["package_logger"] = logging.getLogger("nrf_cloud_client")
        self.logger["urllib3_logger"] = logging.getLogger("urllib3")
        self.logger_format = '%(asctime)s %(levelname)s %(message)s'
        """Log format
        """
        self.logger_stream_handler = None
        """Log stream handler
        """
        self.logger_file_handler: Optional[FileHandler] = None
        """Log file handler
        """
        self.logger_file = None
        """Debug file location
        """
        if debug is not None:
            self.debug = debug
        else:
            self.__debug = False
        """Debug switch
        """

        self.verify_ssl = True
        """SSL/TLS verification
           Set this to false to skip verifying SSL certificate when calling API
           from https server.
        """
        self.ssl_ca_cert = ssl_ca_cert
        """Set this to customize the certificate file to verify the peer.
        """
        self.ca_cert_data = ca_cert_data
        """Set this to verify the peer using PEM (str) or DER (bytes)
           certificate data.
        """
        self.cert_file = None
        """client certificate file
        """
        self.key_file = None
        """client key file
        """
        self.assert_hostname = None
        """Set this to True/False to enable/disable SSL hostname verification.
        """
        self.tls_server_name = None
        """SSL/TLS Server Name Indication (SNI)
           Set this to the SNI value expected by the server.
        """

        self.connection_pool_maxsize = multiprocessing.cpu_count() * 5
        """urllib3 connection pool's maximum number of connections saved
           per pool. urllib3 uses 1 connection as default value, but this is
           not the best value when you are making a lot of possibly parallel
           requests to the same host, which is often the case here.
           cpu_count * 5 is used as default value to increase performance.
        """

        self.proxy: Optional[str] = None
        """Proxy URL
        """
        self.proxy_headers = None
        """Proxy headers
        """
        self.safe_chars_for_path_param = ''
        """Safe chars for path_param
        """
        self.retries = retries
        """Adding retries to override urllib3 default value 3
        """
        # Enable client side validation
        self.client_side_validation = True

        self.socket_options = None
        """Options to pass down to the underlying urllib3 socket
        """

        self.datetime_format = "%Y-%m-%dT%H:%M:%S.%f%z"
        """datetime format
        """

        self.date_format = "%Y-%m-%d"
        """date format
        """

    def __deepcopy__(self, memo:  Dict[int, Any]) -> Self:
        cls = self.__class__
        result = cls.__new__(cls)
        memo[id(self)] = result
        for k, v in self.__dict__.items():
            if k not in ('logger', 'logger_file_handler'):
                setattr(result, k, copy.deepcopy(v, memo))
        # shallow copy of loggers
        result.logger = copy.copy(self.logger)
        # use setters to configure loggers
        result.logger_file = self.logger_file
        result.debug = self.debug
        return result

    def __setattr__(self, name: str, value: Any) -> None:
        object.__setattr__(self, name, value)

    @classmethod
    def set_default(cls, default: Optional[Self]) -> None:
        """Set default instance of configuration.

        It stores default configuration, which can be
        returned by get_default_copy method.

        :param default: object of Configuration
        """
        cls._default = default

    @classmethod
    def get_default_copy(cls) -> Self:
        """Deprecated. Please use `get_default` instead.

        Deprecated. Please use `get_default` instead.

        :return: The configuration object.
        """
        return cls.get_default()

    @classmethod
    def get_default(cls) -> Self:
        """Return the default configuration.

        This method returns newly created, based on default constructor,
        object of Configuration class or returns a copy of default
        configuration.

        :return: The configuration object.
        """
        if cls._default is None:
            cls._default = cls()
        return cls._default

    @property
    def logger_file(self) -> Optional[str]:
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        return self.__logger_file

    @logger_file.setter
    def logger_file(self, value: Optional[str]) -> None:
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        self.__logger_file = value
        if self.__logger_file:
            # If set logging file,
            # then add file handler and remove stream handler.
            self.logger_file_handler = logging.FileHandler(self.__logger_file)
            self.logger_file_handler.setFormatter(self.logger_formatter)
            for _, logger in self.logger.items():
                logger.addHandler(self.logger_file_handler)

    @property
    def debug(self) -> bool:
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        return self.__debug

    @debug.setter
    def debug(self, value: bool) -> None:
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        self.__debug = value
        if self.__debug:
            # if debug status is True, turn on debug logging
            for _, logger in self.logger.items():
                logger.setLevel(logging.DEBUG)
            # turn on httplib debug
            httplib.HTTPConnection.debuglevel = 1
        else:
            # if debug status is False, turn off debug logging,
            # setting log level to default `logging.WARNING`
            for _, logger in self.logger.items():
                logger.setLevel(logging.WARNING)
            # turn off httplib debug
            httplib.HTTPConnection.debuglevel = 0

    @property
    def logger_format(self) -> str:
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        return self.__logger_format

    @logger_format.setter
    def logger_format(self, value: str) -> None:
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        self.__logger_format = value
        self.logger_formatter = logging.Formatter(self.__logger_format)

    def get_api_key_with_prefix(self, identifier: str, alias: Optional[str]=None) -> Optional[str]:
        """Gets API key (with prefix if set).

        :param identifier: The identifier of apiKey.
        :param alias: The alternative identifier of apiKey.
        :return: The token for api key authentication.
        """
        if self.refresh_api_key_hook is not None:
            self.refresh_api_key_hook(self)
        key = self.api_key.get(identifier, self.api_key.get(alias) if alias is not None else None)
        if key:
            prefix = self.api_key_prefix.get(identifier)
            if prefix:
                return "%s %s" % (prefix, key)
            else:
                return key

        return None

    def get_basic_auth_token(self) -> Optional[str]:
        """Gets HTTP basic authentication header (string).

        :return: The token for basic HTTP authentication.
        """
        username = ""
        if self.username is not None:
            username = self.username
        password = ""
        if self.password is not None:
            password = self.password
        return urllib3.util.make_headers(
            basic_auth=username + ':' + password
        ).get('authorization')

    def auth_settings(self)-> AuthSettings:
        """Gets Auth Settings dict for api client.

        :return: The Auth Settings information dict.
        """
        auth: AuthSettings = {}
        if self.simple_token is not None:
            auth['Simple Token'] = {
                'type': 'bearer',
                'in': 'header',
                'key': 'Authorization',
                'value': 'Bearer ' + self.simple_token
            }
        if self.json_token is not None:
            auth['JSON Web Token'] = {
                'type': 'bearer',
                'in': 'header',
                'key': 'Authorization',
                'value': 'Bearer ' + self.simple_token
            }
        if self.evaluation_token is not None:
            auth['Service Evaluation Token'] = {
                'type': 'bearer',
                'in': 'header',
                'key': 'Authorization',
                'value': 'Bearer ' + self.simple_token
            }
        return auth

    def to_debug_report(self) -> str:
        """Gets the essential information for debugging.

        :return: The report for debugging.
        """
        return "Python SDK Debug Report:\n"\
               "OS: {env}\n"\
               "Python Version: {pyversion}\n"\
               "Version of the API: v1\n"\
               "SDK Package Version: 0.0.1".\
               format(env=sys.platform, pyversion=sys.version)

    def get_host_settings(self) -> List[HostSetting]:
        """Gets an array of host settings

        :return: An array of host settings
        """
        return [
            {
                'url': "https://api.nrfcloud.com/v1",
                'description': "No description provided",
            }
        ]

    def get_host_from_settings(
        self,
        index: Optional[int],
        variables: Optional[ServerVariablesT]=None,
        servers: Optional[List[HostSetting]]=None,
    ) -> str:
        """Gets host URL based on the index and variables
        :param index: array index of the host settings
        :param variables: hash of variable and the corresponding value
        :param servers: an array of host settings or None
        :return: URL based on host settings
        """
        if index is None:
            return self._base_path

        variables = {} if variables is None else variables
        servers = self.get_host_settings() if servers is None else servers

        try:
            server = servers[index]
        except IndexError:
            raise ValueError(
                "Invalid index {0} when selecting the host settings. "
                "Must be less than {1}".format(index, len(servers)))

        url = server['url']

        # go through variables and replace placeholders
        for variable_name, variable in server.get('variables', {}).items():
            used_value = variables.get(
                variable_name, variable['default_value'])

            if 'enum_values' in variable \
                    and used_value not in variable['enum_values']:
                raise ValueError(
                    "The variable `{0}` in the host URL has invalid value "
                    "{1}. Must be {2}.".format(
                        variable_name, variables[variable_name],
                        variable['enum_values']))

            url = url.replace("{" + variable_name + "}", used_value)

        return url

    @property
    def host(self) -> str:
        """Return generated host."""
        return self.get_host_from_settings(self.server_index, variables=self.server_variables)

    @host.setter
    def host(self, value: str) -> None:
        """Fix base path."""
        self._base_path = value
        self.server_index = None
